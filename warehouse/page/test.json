{
   "dbt": {
      "config": {
         "materialized": "incremental",
         "unique_key": "session_id"
      },
      "model": "{% set first_values = {\"context_campaign_content\": \"utm_content\", \"context_campaign_medium\": \"utm_medium\", \"context_campaign_name\": \"utm_campaign\", \"context_campaign_source\": \"utm_source\", \"context_campaign_term\": \"utm_term\", \"path\": \"first_page_url_path\", \"search\": \"first_page_url_query\", \"url\": \"first_page_url\"} %} {% set inactivity_cutoff = 30 %} {% set last_values = {\"path\": \"last_path\", \"search\": \"last_search\", \"url\": \"last_url\"} %} {% set pages_target = \"pages\" %} {% set sessionization_trailing_window = 2 %} {% set partition_by = \"partition by session_id\" %}\n\n{% set sessionization_cutoff = \"\n(\n    select\n        {{\n        dbt_utils.safe_cast(\n            dbt_utils.dateadd(\n                'hour',\n                -sessionization_trailing_window,\n                'max(session_start_tstamp)'),\n            'timestamp') }}\n    from {{this}}\n)\n\" %}\n\n  {% set window_clause = \"\n    partition by session_id\n    order by page_view_number\n    rows between unbounded preceding and unbounded following\n    \" %}\n\nwith\n  sessionized as (\n    with pageviews as (\n\n      select * from {{pages_target}}\n\n        {% if is_incremental() %}\n      where anonymous_id in (\n        select distinct anonymous_id\n        from {{pages_target}}\n        where timestamp >= (\n        select\n                {{\n        dbt_utils.safe_cast(\n        dbt_utils.dateadd(\n        'hour',\n        -sessionization_trailing_window,\n        'max(session_start_tstamp)'),\n        'timestamp') }}\n        from {{ this }})\n        )\n          {% endif %}\n      ),\n\n      numbered as (\n\n        --This CTE is responsible for assigning an all-time page view number for a\n        --given anonymous_id. We don't need to do this across devices because the\n        --whole point of this field is for sessionization, and sessions can't span\n        --multiple devices.\n\n        select\n\n          *,\n\n          row_number() over (\n            partition by anonymous_id\n            order by timestamp\n            ) as page_view_number\n\n        from pageviews\n\n        ),\n\n      lagged as (\n\n        --This CTE is responsible for simply grabbing the last value of timestamp.\n        --We'll use this downstream to do timestamp math--it's how we determine the\n        --period of inactivity.\n\n        select\n\n          *,\n\n          lag(timestamp) over (\n            partition by anonymous_id\n            order by page_view_number\n            ) as previous_tstamp\n\n        from numbered\n\n        ),\n\n      new_sessions as (\n\n        --This CTE calculates a single 1/0 field--if the period of inactivity prior\n        --to this page view was greater than 30 minutes, the value is 1, otherwise\n        --it's 0. We'll use this to calculate the user's session #.\n\n        select\n          *,\n          {{ dbt_utils.datediff('previous_tstamp', 'timestamp', 'second') }} as period_of_inactivity,\n          (case\n          when\n          {{ dbt_utils.datediff('previous_tstamp', 'timestamp', 'second') }} <= {{inactivity_cutoff}} then 0 else 1 end) as new_session\n        from lagged\n\n        ),\n\n      session_numbers as (\n\n        --This CTE calculates a user's session (1, 2, 3) number from new_session.\n        --This single field is the entire point of the entire prior series of\n        --calculations.\n\n        select\n\n          *,\n\n          sum(new_session) over (\n            partition by anonymous_id\n            order by page_view_number\n            rows between unbounded preceding and current row\n            ) as session_number\n\n        from new_sessions\n\n        ),\n\n      session_ids as (\n\n        --This CTE assigns a globally unique session id based on the combination of\n        --anonymous_id and session_number.\n\n        select\n          *,\n          {{dbt_utils.surrogate_key('anonymous_id', 'session_number')}} as session_id\n          from session_numbers\n\n      )\n\n      select * from session_ids\n\n  ),\n\n  pageviews as (\n    select distinct\n      session_id,\n      anonymous_id,\n\n      {% for (key, value) in first_values.items() %}\n      first_value({{key}}) over ({{window_clause}}) as {{value}},\n      {% endfor %}\n\n      {% for (key, value) in last_values.items() %}\n      last_value({{key}}) over ({{window_clause}}) as {{value}},\n      {% endfor %}\n\n      min(timestamp) over ( {{partition_by}} ) as session_start_tstamp,\n      max(timestamp) over ( {{partition_by}} ) as session_end_tstamp,\n      count(*) over ( {{partition_by}} ) as page_views\n    from sessionized\n  ),\n\n  sessionized_durations as (\n    select\n      *,\n      {{ dbt_utils.datediff('session_start_tstamp', 'session_end_tstamp', 'second') }} as duration_in_s\n    from pageviews\n\n      {% if is_incremental() %}\n    where session_start_tstamp > (\n      select       {{\n      dbt_utils.safe_cast(\n      dbt_utils.dateadd(\n      'hour',\n      -sessionization_trailing_window,\n      'max(session_start_tstamp)'),\n      'timestamp') }}\n      from {{ this }})\n        {% endif %}\n  ),\n\n  sessions as (\n\n    select\n\n      *,\n\n      case\n        when duration_in_s between 0 and 9 then '0s to 9s'\n        when duration_in_s between 10 and 29 then '10s to 29s'\n        when duration_in_s between 30 and 59 then '30s to 59s'\n        when duration_in_s > 59 then '60s or more'\n        else null\n        end as duration_in_s_tier\n\n    from sessionized_durations\n\n      {% if is_incremental() %}\n    where session_start_tstamp > (\n      select\n             {{\n      dbt_utils.safe_cast(\n      dbt_utils.dateadd(\n      'hour',\n      -sessionization_trailing_window,\n      'max(session_start_tstamp)'),\n      'timestamp') }}\n      from {{ this }})\n        {% endif %}\n  ),\n\n  id_stitching as (\n\n    select distinct\n\n      anonymous_id,\n\n      last_value(user_id) over (\n        partition by anonymous_id\n        order by case when user_id is not null then 0 else 1 end ASC, timestamp\n        rows between unbounded preceding and unbounded following\n        ) as user_id,\n\n      min(timestamp) over (\n        partition by anonymous_id\n        ) as first_seen_at,\n\n      max(timestamp) over (\n        partition by anonymous_id\n        ) as last_seen_at\n\n    from {{pages_target}}\n  ),\n\n  stitched_sessions as (\n    select sessions.*, coalesce(id_stitching.user_id, sessions.anonymous_id) as blended_user_id\n    from sessions left join id_stitching using (anonymous_id)\n    {% if is_incremental() %}\n       where session_start_tstamp > {{sessionization_cutoff}}\n    {% endif %}\n  )\n\n  {% if is_incremental() %}\n\n    , agg as (\n      select\n      blended_user_id,\n      count(*) as starting_session_number\n      from {{this}}\n\n  -- only include sessions that are not going to be resessionized in this run\n  where session_start_tstamp <= {{sessionization_cutoff}} group by 1)\n  {% endif %}\n\nselect\n  *,\n  row_number() over (partition by blended_user_id order by s.session_start_tstamp)\n  {% if is_incremental() %}+ agg.starting_session_number {% endif %}\n  as session_number\n\nfrom stitched_sessions s\n\n  {% if is_incremental() %}\n     left join agg using (blended_user_id)\n  {% endif %}",
      "updateInterval": "PT3H"
   },
   "description": "Website session information for the pageview event",
   "dimensions": {
      "device": {
         "column": "device"
      },
      "device_category": {
         "column": "device_category"
      },
      "duration_in_s": {
         "column": "duration_in_s"
      },
      "duration_in_s_tier": {
         "column": "duration_in_s_tier"
      },
      "first_page_url": {
         "column": "first_page_url"
      },
      "first_page_url_host": {
         "column": "first_page_url_host"
      },
      "first_page_url_path": {
         "column": "first_page_url_path"
      },
      "first_page_url_query": {
         "column": "first_page_url_query"
      },
      "last_page_url": {
         "column": "last_page_url"
      },
      "last_page_url_host": {
         "column": "last_page_url_host"
      },
      "last_page_url_path": {
         "column": "last_page_url_path"
      },
      "last_page_url_query": {
         "column": "last_page_url_query"
      },
      "page_views": {
         "column": "page_views"
      },
      "referrer": {
         "column": "referrer"
      },
      "referrer_host": {
         "column": "referrer_host"
      },
      "session_end_tstamp": {
         "column": "session_end_tstamp"
      },
      "session_id": {
         "column": "session_id"
      },
      "session_number": {
         "column": "session_number"
      },
      "session_start_tstamp": {
         "column": "session_start_tstamp"
      },
      "utm_campaign": {
         "column": "utm_campaign"
      },
      "utm_content": {
         "column": "utm_content"
      },
      "utm_medium": {
         "column": "utm_medium"
      },
      "utm_source": {
         "column": "utm_source"
      },
      "utm_term": {
         "column": "utm_term",
         "first_page_url": {
            "column": "first_page_url"
         },
         "first_page_url_path": {
            "column": "first_page_url_path"
         },
         "first_page_url_query": {
            "column": "first_page_url_query"
         },
         "last_path": {
            "column": "last_path"
         },
         "last_search": {
            "column": "last_search"
         },
         "last_url": {
            "column": "last_url"
         },
         "utm_campaign": {
            "column": "utm_campaign"
         },
         "utm_content": {
            "column": "utm_content"
         },
         "utm_medium": {
            "column": "utm_medium"
         },
         "utm_source": {
            "column": "utm_source"
         },
         "utm_term": {
            "column": "utm_term"
         }
      }
   },
   "label": "Pageview Sessions",
   "mappings": {
      "eventTimestamp": "session_start_tstamp",
      "incremental": "received_at",
      "userId": "blended_user_id"
   },
   "measures": {
      "Average Duration": {
         "aggregation": "average",
         "column": "duration_in_s",
         "reportOptions": {
            "formatNumbers": true,
            "prefix": "",
            "suffix": " seconds"
         }
      },
      "Average Session Per User": {
         "aggregation": "average",
         "column": "session_number",
         "reportOptions": {
            "formatNumbers": true
         }
      },
      "Bounce Rate": {
         "reportOptions": {
            "formatNumbers": true
         },
         "sql": "1.0 * sum(case when \"page_views\" = 1 then 1 else 0 end) /\n            nullif(count(*), 0)"
      },
      "Distinct Users": {
         "aggregation": "countUnique",
         "column": "userId",
         "reportOptions": {
            "formatNumbers": true
         }
      },
      "New Sessions": {
         "reportOptions": {
            "formatNumbers": true
         },
         "sql": "sum(case when \"session_number\" = 1 then 1 else 0 end)"
      },
      "Pages Per Session": {
         "reportOptions": {
            "formatNumbers": true
         },
         "sql": "1.0 * \"page_views\" / nullif(count(*), 0)"
      },
      "Returning Sessions": {
         "reportOptions": {
            "formatNumbers": true
         },
         "sql": "sum(case when \"session_number\" > 1 then 1 else 0 end)"
      },
      "Total Sessions": {
         "aggregation": "count",
         "reportOptions": {
            "formatNumbers": true
         }
      }
   },
   "name": "rakam_segment_web_sessions",
   "target": {
      "database": null,
      "schema": null,
      "table": "pages"
   }
}
